https://docs.microsoft.com/en-us/azure/machine-learning/tutorial-train-models-with-aml


1. From Azure portal create a resource 'Machine Learning'. Login to ml.azure.com. Use the notebook option to create notebook.

from azureml.core import Workspace
ws = Workspace.from_config()

from azureml.core import Experiment
experiment = Experiment(workspace=ws, name="diabetes-experiment")

from azureml.opendatasets import Diabetes
from sklearn.model_selection import train_test_split

x_df = Diabetes.get_tabular_dataset().to_pandas_dataframe().dropna()
y_df = x_df.pop("Y")

X_train, X_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=66)

from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.externals import joblib
import math

alphas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

for alpha in alphas:
    run = experiment.start_logging()
    run.log("alpha_value", alpha)
    
    model = Ridge(alpha=alpha)
    model.fit(X=X_train, y=y_train)
    y_pred = model.predict(X=X_test)
    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))
    run.log("rmse", rmse)
    
    model_name = "model_alpha_" + str(alpha) + ".pkl"
    filename = "outputs/" + model_name
    
    joblib.dump(value=model, filename=filename)
    run.upload_file(name=model_name, path_or_stream=filename)
    run.complete()
   
The above code accomplishes the following:

For each alpha hyperparameter value in the alphas array, a new run is created within the experiment. The alpha value is logged to differentiate between each run.
In each run, a Ridge model is instantiated, trained, and used to run predictions. The root-mean-squared-error is calculated for the actual versus predicted values, and then logged to the run. At this point the run has metadata attached for both the alpha value and the rmse accuracy.
Next, the model for each run is serialized and uploaded to the run. This allows you to download the model file from the run in the studio.
At the end of each iteration the run is completed by calling run.complete().

minimum_rmse_runid = None
minimum_rmse = None

for run in experiment.get_runs():
    run_metrics = run.get_metrics()
    run_details = run.get_details()
    # each logged metric becomes a key in this returned dict
    run_rmse = run_metrics["rmse"]
    run_id = run_details["runId"]

    if minimum_rmse is None:
        minimum_rmse = run_rmse
        minimum_rmse_runid = run_id
    else:
        if run_rmse < minimum_rmse:
            minimum_rmse = run_rmse
            minimum_rmse_runid = run_id

print("Best run_id: " + minimum_rmse_runid)
print("Best run_id rmse: " + str(minimum_rmse))

In addition to being able to download model files from the experiment in the studio, you can also download them programmatically. 
The following code iterates through each run in the experiment, and accesses both the logged run metrics and the run details (which contains the run_id). 
This keeps track of the best run, in this case the run with the lowest root-mean-squared-error.

Best run_id: 864f5ce7-6729-405d-b457-83250da99c80
Best run_id rmse: 57.234760283951765

Use the best run ID to fetch the individual run using the Run constructor along with the experiment object. 
Then call get_file_names() to see all the files available for download from this run. 
In this case, you only uploaded one file for each run during training.

from azureml.core import Run
best_run = Run(experiment=experiment, run_id=minimum_rmse_runid)
print(best_run.get_file_names())
['model_alpha_0.1.pkl']

Call download() on the run object, specifying the model file name to download. By default this function downloads to the current directory.

best_run.download_file(name="model_alpha_0.1.pkl")
